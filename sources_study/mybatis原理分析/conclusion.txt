mybatis和mybatis-plus中的sqlSession创建过程
1.mybatis通过MybatisAutoConfiguration创建SqlSesssionFactory
2.mybatis通过MapperFactoryBean的getObjecjt方法获取sqlsession,内部调用
DefaultSqlSession的getMapper方法,通过configuration.getMapper获取sqlsession对象
也就是利用了SqlSessionFactory
3.MybatisAutoConfigration的getMapper通过调用facotry.getObject获取SqlSession
4.
    1,mybatis-plus通过继承MapperRegistry类,实现了自己的MybatisMapperRegistry类,
    2.myabtis-plus通过实现了自己configuration类MybatisConfiguration,使用自己的MybatisMapperRegistry创建sqlSession

5.MybatisMapperRegistry通过中也是通过MapperProxyFactory的子类.newInstance创建SqlSession


mybatis的方法执行过程
1.mybatis将对应的执行sql方法包装成MybatisMapperProxy对象,在执行的时候调用MybatisMapperProxy的invoke方法
2.MybatisMapperMethod的execute通过判断对应的方法类型,判断执行sqlSession的updae方法还是其他方法
3.以select方法举例,MybatisMapperMethod,executeForMany调用执行sqlSession->selectList
4.调用DefaultSqlSession.selectList方法,内部调用BaseExecutor->query方法


mybatis数据源data加载过程
1.MybatisAutoConfigration通过@ConditionalOnMissingBean注解加载MapperFactoryBean,MapperScannerConfiger
2.MapperFactoryBean通过继承SqlSessionDaoSupport获得JdbcDaoSupport中的getConnecion等方法
3.SqlSessionDaoSupport继承DaoSupport,有一个SqlSessionTemplate的成员变量
3.DaoSupport实现了InitialingBean接口,在spring-core初始化bean之后,会调用afterProptertiesSet初始化dao


mybatis-plus增加mapper-sql方法代理的过程
1.通过MybatisConfiguration的addMapper添加
2.调用自己的MybatisMapperRegisty的addMapper,通过map判断是否存在
不存则根据class创建一个MybatisMapperProxtFactory代理对象
3.mybatis-plus通过injectMappedStatment方法,通过一些默认的AbstractMethod的类如Insert,selectList类
实现默认的list等方法注入